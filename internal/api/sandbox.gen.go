// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for SandboxStatus.
const (
	DELETED SandboxStatus = "DELETED"
	EXPIRED SandboxStatus = "EXPIRED"
	FAILED  SandboxStatus = "FAILED"
	PENDING SandboxStatus = "PENDING"
	RUNNING SandboxStatus = "RUNNING"
	STOPPED SandboxStatus = "STOPPED"
	UNKNOWN SandboxStatus = "UNKNOWN"
)

// Defines values for StatusStatus.
const (
	ERROR StatusStatus = "ERROR"
	OK    StatusStatus = "OK"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Sandbox defines model for Sandbox.
type Sandbox struct {
	CreatedAt *time.Time     `json:"createdAt,omitempty"`
	ExpiresAt *time.Time     `json:"expiresAt,omitempty"`
	Id        *string        `json:"id,omitempty"`
	Name      *string        `json:"name,omitempty"`
	Status    *SandboxStatus `json:"status,omitempty"`
	UpdatedAt *time.Time     `json:"updatedAt,omitempty"`
}

// SandboxStatus defines model for Sandbox.Status.
type SandboxStatus string

// SandboxCreate defines model for SandboxCreate.
type SandboxCreate struct {
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	Name      *string    `json:"name,omitempty"`
}

// SandboxUpdate defines model for SandboxUpdate.
type SandboxUpdate struct {
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
}

// Status defines model for Status.
type Status struct {
	Message *string       `json:"message,omitempty"`
	Status  *StatusStatus `json:"status,omitempty"`
}

// StatusStatus defines model for Status.Status.
type StatusStatus string

// ListSandboxesParams defines parameters for ListSandboxes.
type ListSandboxesParams struct {
	// Limit The number of items to return
	Limit int `form:"limit" json:"limit"`

	// Offset The number of items to skip before starting to collect the result set
	Offset int `form:"offset" json:"offset"`
}

// CreateSandboxJSONRequestBody defines body for CreateSandbox for application/json ContentType.
type CreateSandboxJSONRequestBody = SandboxCreate

// UpdateSandboxJSONRequestBody defines body for UpdateSandbox for application/json ContentType.
type UpdateSandboxJSONRequestBody = SandboxUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	Health(w http.ResponseWriter, r *http.Request)
	// List sandboxes
	// (GET /sandboxes)
	ListSandboxes(w http.ResponseWriter, r *http.Request, params ListSandboxesParams)
	// Create a sandbox
	// (POST /sandboxes)
	CreateSandbox(w http.ResponseWriter, r *http.Request)
	// Get a sandbox by name
	// (GET /sandboxes/name/{name})
	GetSandboxByName(w http.ResponseWriter, r *http.Request, name string)
	// Delete a sandbox
	// (DELETE /sandboxes/{id})
	DeleteSandbox(w http.ResponseWriter, r *http.Request, id string)
	// Get a sandbox
	// (GET /sandboxes/{id})
	GetSandbox(w http.ResponseWriter, r *http.Request, id string)
	// Update a sandbox
	// (PATCH /sandboxes/{id})
	UpdateSandbox(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Health operation middleware
func (siw *ServerInterfaceWrapper) Health(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Health(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSandboxes operation middleware
func (siw *ServerInterfaceWrapper) ListSandboxes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSandboxesParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------

	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSandboxes(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSandbox operation middleware
func (siw *ServerInterfaceWrapper) CreateSandbox(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"sandbox:w"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSandbox(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSandboxByName operation middleware
func (siw *ServerInterfaceWrapper) GetSandboxByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSandboxByName(w, r, name)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSandbox operation middleware
func (siw *ServerInterfaceWrapper) DeleteSandbox(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"sandbox:w"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSandbox(w, r, id)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSandbox operation middleware
func (siw *ServerInterfaceWrapper) GetSandbox(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSandbox(w, r, id)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSandbox operation middleware
func (siw *ServerInterfaceWrapper) UpdateSandbox(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"sandbox:w"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSandbox(w, r, id)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.Health)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sandboxes", wrapper.ListSandboxes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sandboxes", wrapper.CreateSandbox)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sandboxes/name/{name}", wrapper.GetSandboxByName)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/sandboxes/{id}", wrapper.DeleteSandbox)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sandboxes/{id}", wrapper.GetSandbox)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/sandboxes/{id}", wrapper.UpdateSandbox)
	})

	return r
}

type HealthRequestObject struct {
}

type HealthResponseObject interface {
	VisitHealthResponse(w http.ResponseWriter) error
}

type Health200JSONResponse Status

func (response Health200JSONResponse) VisitHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListSandboxesRequestObject struct {
	Params ListSandboxesParams
}

type ListSandboxesResponseObject interface {
	VisitListSandboxesResponse(w http.ResponseWriter) error
}

type ListSandboxes200JSONResponse []Sandbox

func (response ListSandboxes200JSONResponse) VisitListSandboxesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListSandboxesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListSandboxesdefaultJSONResponse) VisitListSandboxesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSandboxRequestObject struct {
	Body *CreateSandboxJSONRequestBody
}

type CreateSandboxResponseObject interface {
	VisitCreateSandboxResponse(w http.ResponseWriter) error
}

type CreateSandbox201JSONResponse Sandbox

func (response CreateSandbox201JSONResponse) VisitCreateSandboxResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSandboxdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateSandboxdefaultJSONResponse) VisitCreateSandboxResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSandboxByNameRequestObject struct {
	Name string `json:"name"`
}

type GetSandboxByNameResponseObject interface {
	VisitGetSandboxByNameResponse(w http.ResponseWriter) error
}

type GetSandboxByName200JSONResponse []Sandbox

func (response GetSandboxByName200JSONResponse) VisitGetSandboxByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSandboxByNamedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSandboxByNamedefaultJSONResponse) VisitGetSandboxByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteSandboxRequestObject struct {
	Id string `json:"id"`
}

type DeleteSandboxResponseObject interface {
	VisitDeleteSandboxResponse(w http.ResponseWriter) error
}

type DeleteSandbox204Response struct {
}

func (response DeleteSandbox204Response) VisitDeleteSandboxResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSandboxdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteSandboxdefaultJSONResponse) VisitDeleteSandboxResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSandboxRequestObject struct {
	Id string `json:"id"`
}

type GetSandboxResponseObject interface {
	VisitGetSandboxResponse(w http.ResponseWriter) error
}

type GetSandbox200JSONResponse Sandbox

func (response GetSandbox200JSONResponse) VisitGetSandboxResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSandboxdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSandboxdefaultJSONResponse) VisitGetSandboxResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSandboxRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateSandboxJSONRequestBody
}

type UpdateSandboxResponseObject interface {
	VisitUpdateSandboxResponse(w http.ResponseWriter) error
}

type UpdateSandbox200JSONResponse Sandbox

func (response UpdateSandbox200JSONResponse) VisitUpdateSandboxResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSandboxdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateSandboxdefaultJSONResponse) VisitUpdateSandboxResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Health check
	// (GET /health)
	Health(ctx context.Context, request HealthRequestObject) (HealthResponseObject, error)
	// List sandboxes
	// (GET /sandboxes)
	ListSandboxes(ctx context.Context, request ListSandboxesRequestObject) (ListSandboxesResponseObject, error)
	// Create a sandbox
	// (POST /sandboxes)
	CreateSandbox(ctx context.Context, request CreateSandboxRequestObject) (CreateSandboxResponseObject, error)
	// Get a sandbox by name
	// (GET /sandboxes/name/{name})
	GetSandboxByName(ctx context.Context, request GetSandboxByNameRequestObject) (GetSandboxByNameResponseObject, error)
	// Delete a sandbox
	// (DELETE /sandboxes/{id})
	DeleteSandbox(ctx context.Context, request DeleteSandboxRequestObject) (DeleteSandboxResponseObject, error)
	// Get a sandbox
	// (GET /sandboxes/{id})
	GetSandbox(ctx context.Context, request GetSandboxRequestObject) (GetSandboxResponseObject, error)
	// Update a sandbox
	// (PATCH /sandboxes/{id})
	UpdateSandbox(ctx context.Context, request UpdateSandboxRequestObject) (UpdateSandboxResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictHttpHandlerFunc
type StrictMiddlewareFunc = runtime.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Health operation middleware
func (sh *strictHandler) Health(w http.ResponseWriter, r *http.Request) {
	var request HealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Health(ctx, request.(HealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Health")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthResponseObject); ok {
		if err := validResponse.VisitHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ListSandboxes operation middleware
func (sh *strictHandler) ListSandboxes(w http.ResponseWriter, r *http.Request, params ListSandboxesParams) {
	var request ListSandboxesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListSandboxes(ctx, request.(ListSandboxesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSandboxes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListSandboxesResponseObject); ok {
		if err := validResponse.VisitListSandboxesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CreateSandbox operation middleware
func (sh *strictHandler) CreateSandbox(w http.ResponseWriter, r *http.Request) {
	var request CreateSandboxRequestObject

	var body CreateSandboxJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSandbox(ctx, request.(CreateSandboxRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSandbox")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSandboxResponseObject); ok {
		if err := validResponse.VisitCreateSandboxResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetSandboxByName operation middleware
func (sh *strictHandler) GetSandboxByName(w http.ResponseWriter, r *http.Request, name string) {
	var request GetSandboxByNameRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSandboxByName(ctx, request.(GetSandboxByNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSandboxByName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSandboxByNameResponseObject); ok {
		if err := validResponse.VisitGetSandboxByNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteSandbox operation middleware
func (sh *strictHandler) DeleteSandbox(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteSandboxRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSandbox(ctx, request.(DeleteSandboxRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSandbox")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSandboxResponseObject); ok {
		if err := validResponse.VisitDeleteSandboxResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetSandbox operation middleware
func (sh *strictHandler) GetSandbox(w http.ResponseWriter, r *http.Request, id string) {
	var request GetSandboxRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSandbox(ctx, request.(GetSandboxRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSandbox")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSandboxResponseObject); ok {
		if err := validResponse.VisitGetSandboxResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UpdateSandbox operation middleware
func (sh *strictHandler) UpdateSandbox(w http.ResponseWriter, r *http.Request, id string) {
	var request UpdateSandboxRequestObject

	request.Id = id

	var body UpdateSandboxJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSandbox(ctx, request.(UpdateSandboxRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSandbox")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateSandboxResponseObject); ok {
		if err := validResponse.VisitUpdateSandboxResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX32/bNhD+V4jbHjXLbfZQ6M2p3cxLYBt2gg4I8kBLZ4utJLLkqYsX6H8fSMo/Ysmu",
	"02ZrhvXFlnin4919332UHiCWuZIFFmQgegATp5hzdznQWmp7obRUqEmgW45lgvY/QRNroUjIAiLvzJwt",
	"gIXUOSeIQBR09hoCoJVCf4tL1FAFkKMxfHkw0Nq8edSQFsUSqioAjZ9KoTGB6BbqDdfudxt/Of+AMdmd",
	"ZrxI5vK+pRCNnDDpkb3ZpJxwwl9I5C17B4D3Smg0T3lEJNa3sVzwHFsNhjiVLj8sytzWOL0ZjYajCwhg",
	"dj2eTAZ9CGDwx2Q4dVeTwajvre96wyu31B9cDa7d1c3ocjR+P9rpy3ajUiVPK7863Ny3rpXNFn9Fvw40",
	"5sjmN66QZ9i8dY8NHI+D7/D3BAjHlxaz6XQ8bYGiua2NgXGpBa1mdh79lufINepeSam9m7u7d+uyfn9/",
	"DYGfXhvJW7clpkQKKhtYFAvZnLrrVBgmDOOsbirr/VVqZL3JkBnUn1F3bDBBmY3W8IEAPqM2PtarTrfT",
	"tX2QCguuBERw1ul2ziAAxSl1tYQp8swXskRq5vObM7M4xfgjuEiaW9Mw2RjBKoFRsjC+Pa+7XS9PBWHh",
	"QnKlMhG758IPxsZd65u9+lnjAiL4KdwKYFirX1ij7hr2OLHxpYenzHOuV/uZWlNofHd8Vq3VXQlDbOu2",
	"X581z3asimueI6E2EN02kUNWlPkcNZMLJghzw0gyjVTqAizeEMGnEvUK1sMFmcgFwa6Ski4x2GnOvmBX",
	"wYn7mo9CsTkupEZmiGsSxdKuxzLLMCZGKTKNpsyIGaQD+cnFwhufkODdN9LBVfBFXtRnyXZkudZ8dYgo",
	"dm3By4yejZj+TG7ZrizwXmFMmDCsfXZZuse4KgAlTQszvZAzvvZtcNM7zDZWixAaOpfJ6vmm79Gh0lLs",
	"Wn8sr7zTPlWqBhtePXd6bYn5lJMXgHx9fDjB2D04bqFGNvoT7uzQbDnSwP6xmoV2OMMH+1sdVLYLpG0A",
	"Nl8xN9H7JLrAtb6dr0be4ajGrfGugznJsEfJVjFqyxf1YnPm/pCLY3LRDuMeHx5EUnkGZEgtb/J9t35E",
	"S7zDVktO4sCw384AkXwj/r82KxhJ9raG4T850Q0EquCEsT0yrt8dpO6/oeIveBbdyc0pTpsY+s+gIzB6",
	"h++I5D/2plB/AR5/U/Dfuye8Kfx/OPYVktJgWXU8kn/cfUF6mpU6q79HozDMZMyzVBqK3nTfdKG6q/4O",
	"AAD//6SJ322QEgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
